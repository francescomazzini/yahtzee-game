{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// this is a library we need, to read text input \"easily\"\nimport prompt from 'prompt-sync';\n\nconst input = prompt();\n\n// these are some codes to get the console to print in colors\n// see more details here:\n// https://bit.ly/3T8YcDQ\nconst Reset = \"\\x1b[0m\";\nconst BgRed = \"\\x1b[41m\";\nconst BgGreen = \"\\x1b[42m\";\nconst BgYellow = \"\\x1b[43m\";\nconst BgBlue = \"\\x1b[44m\";\nconst BgMagenta = \"\\x1b[45m\";\nconst BgCyan = \"\\x1b[46m\";\nconst BgWhite = \"\\x1b[47m\";\n\n//define the player interface\ninterface Player {\n  //color can be green, yellow, blue or magenta\n  color: string,\n  // color: string,\n  score: number[]\n}\n\nconst N_DIES: number = 5;\n\ntype Die = 1 | 2 | 3 | 4 | 5 | 6;\n\n//this function creates the number of player wanted and set up their colors and score (default value)\nconst createPlayer = (numberNewPlayer: number): Player[] => {\n\n  if (numberNewPlayer < 1)\n    return [];\n\n  return [...createPlayer(numberNewPlayer - 1), {\n    color:\n      `\\x1b[4${numberNewPlayer + 1}m`, score: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  }];\n\n}\n\n\n//this function will manage the setup part (beginning) of the game\nconst startGame = (): Player[] => {\n\n  console.log('Welcome to Yahtzee Game!');\n\n  //magari dovrei separare e emettere questo in un'altra funzione per ridurre l'uso dell'interazione\n\n  const numberOfPlayers: number = getNumberOfPlayer();\n\n  return createPlayer(numberOfPlayers);\n\n}\n\n//this function will manage the correctness of the input of the \n//number of players (a value between 1-4) and return the correct value\n//when received\nconst getNumberOfPlayer = (): number => {\n  const answer = input(`How many people are going to play? (1-4) `)\n  switch (answer) {\n    case \"1\": return 1\n    case \"2\": return 2\n    case \"3\": return 3\n    case \"4\": return 4\n    default: {\n      console.log(\"Invalid number, please choose a number of players(1-4) \")\n      return getNumberOfPlayer();\n    }\n  }\n}\n\n//this functions roll a number of dice\nconst rollDice = (numberDice: number): Die[] => {\n  if (numberDice < 1)\n    return [];\n  else\n    return [(Math.trunc(Math.random() * 6) + 1) as Die, ...rollDice(numberDice - 1)];\n}\n\n//this function recursively use the indexes to generate the new array\n//of dice that the user wanted to keep\nconst whichDieToKeep = ([index1, ...indexes]: number[], dice: Die[]): Die[] => {\n  if (indexes.length !== 0)\n    return [dice[index1], ...whichDieToKeep(indexes, dice)];\n\n  return [];\n}\n\n//this function asks the user one die to keep and manages the check on the input\nconst indexOfDie = (): number => {\n\n  console.log(`Which of the dice, would you like to keep? Write its number (1-5) or write 0 to stop choosing (if you don't want any, write immediately 0)`)\n\n  const answer = input();\n\n  switch (answer) {\n    case '0':\n      return 0;\n    case '1':\n      return 1;\n    case '2':\n      return 2;\n    case '3':\n      return 3;\n    case '4':\n      return 4;\n    case '5':\n      return 5;\n    default: {\n      console.log(\"Invalid number, please choose a number between 1-5 or 0 \");\n    }\n\n  }\n\n  return indexOfDie();\n\n}\n\n//this function gathers all the indexes for the dice that the user wants to keep\nconst indexOfDice = (counter: number, indexes: number[]): number[] => {\n\n  if (counter > 5)\n    return [];\n\n  const index: number = indexOfDie();\n\n  if (index !== 0) {\n\n    if (indexes.some((i: number) => i === index)) {\n      console.log(\"You can't choose the same die twice\");\n      return [...indexOfDice(counter, indexes)];\n    } else\n      return [index, ...indexOfDice(counter + 1, [index, ...indexes])];\n  }\n\n  return [];\n\n  // const indexes: number[] = [];\n\n  // for (let i = 0; i < 5; i++) {\n\n  //   let index: number = indexOfDie();\n\n  //   while (indexes.some((ind: number) => ind === index)) {\n  //     console.log(\"You can't choose the same die twice\");\n  //     index = indexOfDie();\n  //   }\n\n  //   if (index === 0)\n  //     break;\n\n  //   indexes.push(index);\n  // }\n\n  // return indexes;\n\n}\n\n//this function manages the functions for deciding which die to keep. \n//It also maps their indexes because the user inserts them from 1 to 5 \n//and instead they are needed from 0 to 4\nconst askDiceToKeep = (dice: Die[]): Die[] => {\n\n  console.log(\"The dice have been rolled\");\n  console.log(\"Their values are: \");\n  console.log(dice);\n\n  const indexDiceKeep: number[] = indexOfDice(1, []);\n  const newDice: Die[] = indexDiceKeep.length === 5 ? dice\n    : whichDieToKeep(indexDiceKeep.map((i: number) => i - 1), dice);\n\n  console.log(\"You kept the following dice: \");\n  console.log(newDice);\n\n  return newDice;\n\n}\n\n//this function manages the turn of a player in which he rolls dice\nconst turn = (currentPlayer: Player, numberRound: 1 | 2 | 3 /*| 4?*/, dice: Die[]): Player => {\n\n  const tempDice: Die[] = [...dice, ...rollDice(N_DIES - dice.length)];\n\n  if (numberRound !== 3) {\n    const keptDice: Die[] = askDiceToKeep(tempDice);\n  } else {\n\n\n    //chiedi per quale vuole mettere i punti\n    //calcola punteggio\n    //inserisci i punti\n    // ritorna il player\n  }\n\n  return { color: \"asa\", score: [0, 0] };\n\n}\n\n//this function manages all the middle part of the game in which players actually play\nconst midGame = (players: Player[], playerNumber: number): Player[] | null => {\n\n  turn(players[playerNumber], 1, []);\n\n  //print\n  //chiama il turn del primo player\n  //se non ci sta un winner continua col player dopo richiamando ricorsivamente questa funzione che si ferma solo quando il gioco potrebbe esser finito. Passa il player del turno a turn()\n\n\n\n\n  return null;\n}\n\n//this function will manage the structure of the game itself\n//referring to any possible and needed state of the game\nconst game = (): void => {\n  const players: Player[] = startGame();\n\n  //return the winner(s) or null if there's a total draw\n  const winner: Player[] | null = midGame(players, 0);\n\n}\n\ngame();\n\n\n\n\n\n\n// const throwDie = (): number => Math.trunc(Math.random() * 6) + 1;\n\n\n// this is a small example to show how the pieces fit together\n// const example = (): void => {\n//   console.log(`type anything to throw a die, or ${BgRed}'exit'${Reset} to quit`);\n//   const command: string = input();\n//   if (command == 'exit') {\n//     console.log(`${BgGreen}See you next time!${Reset}`);\n//   } else {\n//     const die = throwDie();\n//     console.log(`you threw: ${BgBlue} ${die} ${Reset}`);\n//     example();\n//   }\n// }\n\n// example();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AACA,yBAAmB;AAEnB,MAAM,QAAQ;AAKd,MAAM,QAAQ;AACd,MAAM,QAAQ;AACd,MAAM,UAAU;AAChB,MAAM,WAAW;AACjB,MAAM,SAAS;AACf,MAAM,YAAY;AAClB,MAAM,SAAS;AACf,MAAM,UAAU;AAUhB,MAAM,SAAiB;AAKvB,MAAM,eAAe,CAAC,oBAAsC;AAE1D,MAAI,kBAAkB;AACpB,WAAO;AAET,SAAO,CAAC,GAAG,aAAa,kBAAkB,IAAI;AAAA,IAC5C,OACE,MAAS,kBAAkB;AAAA,IAAM,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA;AAAA;AAOzF,MAAM,YAAY,MAAgB;AAEhC,UAAQ,IAAI;AAIZ,QAAM,kBAA0B;AAEhC,SAAO,aAAa;AAAA;AAOtB,MAAM,oBAAoB,MAAc;AACtC,QAAM,SAAS,MAAM;AACrB,UAAQ;AAAA,SACD;AAAK,aAAO;AAAA,SACZ;AAAK,aAAO;AAAA,SACZ;AAAK,aAAO;AAAA,SACZ;AAAK,aAAO;AAAA,aACR;AACP,cAAQ,IAAI;AACZ,aAAO;AAAA;AAAA;AAAA;AAMb,MAAM,WAAW,CAAC,eAA8B;AAC9C,MAAI,aAAa;AACf,WAAO;AAAA;AAEP,WAAO,CAAE,KAAK,MAAM,KAAK,WAAW,KAAK,GAAW,GAAG,SAAS,aAAa;AAAA;AAKjF,MAAM,iBAAiB,CAAC,CAAC,WAAW,UAAoB,SAAuB;AAC7E,MAAI,QAAQ,WAAW;AACrB,WAAO,CAAC,KAAK,SAAS,GAAG,eAAe,SAAS;AAEnD,SAAO;AAAA;AAIT,MAAM,aAAa,MAAc;AAE/B,UAAQ,IAAI;AAEZ,QAAM,SAAS;AAEf,UAAQ;AAAA,SACD;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA,aACA;AACP,cAAQ,IAAI;AAAA;AAAA;AAKhB,SAAO;AAAA;AAKT,MAAM,cAAc,CAAC,SAAiB,YAAgC;AAEpE,MAAI,UAAU;AACZ,WAAO;AAET,QAAM,QAAgB;AAEtB,MAAI,UAAU,GAAG;AAEf,QAAI,QAAQ,KAAK,CAAC,MAAc,MAAM,QAAQ;AAC5C,cAAQ,IAAI;AACZ,aAAO,CAAC,GAAG,YAAY,SAAS;AAAA;AAEhC,aAAO,CAAC,OAAO,GAAG,YAAY,UAAU,GAAG,CAAC,OAAO,GAAG;AAAA;AAG1D,SAAO;AAAA;AA0BT,MAAM,gBAAgB,CAAC,SAAuB;AAE5C,UAAQ,IAAI;AACZ,UAAQ,IAAI;AACZ,UAAQ,IAAI;AAEZ,QAAM,gBAA0B,YAAY,GAAG;AAC/C,QAAM,UAAiB,cAAc,WAAW,IAAI,OAChD,eAAe,cAAc,IAAI,CAAC,MAAc,IAAI,IAAI;AAE5D,UAAQ,IAAI;AACZ,UAAQ,IAAI;AAEZ,SAAO;AAAA;AAKT,MAAM,OAAO,CAAC,eAAuB,aAAiC,SAAwB;AAE5F,QAAM,WAAkB,CAAC,GAAG,MAAM,GAAG,SAAS,SAAS,KAAK;AAE5D,MAAI,gBAAgB,GAAG;AACrB,UAAM,WAAkB,cAAc;AAAA,SACjC;AAAA;AASP,SAAO,EAAE,OAAO,OAAO,OAAO,CAAC,GAAG;AAAA;AAKpC,MAAM,UAAU,CAAC,SAAmB,iBAA0C;AAE5E,OAAK,QAAQ,eAAe,GAAG;AAS/B,SAAO;AAAA;AAKT,MAAM,OAAO,MAAY;AACvB,QAAM,UAAoB;AAG1B,QAAM,SAA0B,QAAQ,SAAS;AAAA;AAInD;",
  "names": []
}
